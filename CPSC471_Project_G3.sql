/*
  1. The SQL statements in this file and the pseudocode list in the HIPO Functions includes all
     possible statements we can think of at this moment.
  2. We use MySQL Ver 8.0.18 as our SQL Dialect.
  3. We use UUID as primary keys(ID) for CLIENT, ITEM, ADMINISTRATOR, COMMENT, ORDER and we use
     binary(16) to store them internally, it will be converted to string in the interface of websites
     for better readability for clients and administrators.
  4. We change the KEYWORD in IDEA_LIST as a JSON array that contains non-empty unique strings(use triggers/PHP to validate),
     and remove the relation IDEA_LIST_KEYWORD for simplify the logic.
  5. Some triggers are not finished completely and will be completed later with the help of PHP, such as the JSON ARRAY in
     a tuple of IDEA_LIST should contain unique, non-empty string objects and its length should have an upper-bound.
 */

DROP DATABASE IF EXISTS CPSC_471_PROJECT_G3; /* Delete the old database if exists */
CREATE DATABASE CPSC_471_PROJECT_G3; /* Create the database for our project */
SHOW DATABASES; /* Show all current databases */
USE CPSC_471_PROJECT_G3;
/* Choose the database we are gonna use */

/**** Create all tables, CHECK constraints, events, triggers without foreign keys ****/
/* create table ITEM */
CREATE TABLE `ITEM`
(
    `ID`                  binary(16)    NOT NULL,
    `NAME`                varchar(30)   NOT NULL,
    `PAGE_VISIT_COUNTER`  int(11)       NOT NULL DEFAULT '0',
    `DESCRIPTION`         varchar(100)  NOT NULL,
    `CONDITION`           varchar(30)   NOT NULL DEFAULT 'USED_GOOD',
    `PRICE`               decimal(8, 2) NOT NULL DEFAULT '0.00',
    `TYPE`                varchar(30)   NOT NULL,
    `DAYS_TO_EXPIRE`      int(11)       NOT NULL DEFAULT '365',
    `PICTURE`             varchar(256)           DEFAULT NULL COMMENT 'a PICTURE is a file path to its image',
    `ADMINISTRATOR_ID`    binary(16)             DEFAULT NULL,
    `CLIENT_ID_OF_BUYER`  binary(16)             DEFAULT NULL,
    `CLIENT_ID_OF_SELLER` binary(16)    NOT NULL,
    PRIMARY KEY (`ID`)
);
/* Create an event that deletes expired items base on a daily check */
DELIMITER $$
CREATE EVENT IF NOT EXISTS EXPIRED_ITEMS_CHECK
    ON SCHEDULE EVERY 1 DAY STARTS DATE_ADD(CURDATE(), INTERVAL 1 DAY)
    ON COMPLETION PRESERVE ENABLE
    DO DELETE
       FROM ITEM
       WHERE DAYS_TO_EXPIRE = 0;
DELIMITER ;
/* Set the minimum length of the item's description */
ALTER TABLE ITEM
    ADD CONSTRAINT DESCRIPTION_MIN_LENGTH
        CHECK ( LENGTH(DESCRIPTION) >= 5 );
/* Set the minimum length of the item's name */
ALTER TABLE ITEM
    ADD CONSTRAINT NAME_MIN_LENGTH
        CHECK ( LENGTH(NAME) >= 3 );
/* Validate the item's condition */
ALTER TABLE ITEM
    ADD CONSTRAINT ITEM_CONDITION
        CHECK ( `CONDITION` IN (
                                'USED_ACCEPTABLE', /* The item is fairly worn but continues to function properly. */
                                'USED_GOOD', /* The item shows wear from consistent use, but it remains in good condition and functions properly. */
                                'USED_VERY_GOOD', /* The item has seen limited use and remains in good working condition */
                                'USED_OPEN_BOX', /* The item in perfect working condition. and the user just unwraps it just a while ago. */
                                'NEW') );
/* The item is completely without being unwrapped. */
/* Validate the item's price */
ALTER TABLE ITEM
    ADD CONSTRAINT ITEM_PRICE
        CHECK ( PRICE >= 0.00 );
/* Validate the item's type */
ALTER TABLE ITEM
    ADD CONSTRAINT ITEM_TYPE
        CHECK ( TYPE IN
                ('BOOKS', /*Books, Calendars, Card Decks, Sheet Music, Issues of Magazines and Journals, and other publications*/
                 'ELECTRONIC_BOOKS', /*E-books, Course materials ... */
                 'CONSUMER_ELECTRONICS', /*TV, CD Player , Camera, Cellphone, Charger ... */
                 'FOOD', /*Snack, Beverages */
                 'PERSONAL_COMPUTERS', /*Desktops, Laptops, Drives, Storage, RaspberryPi ...*/
                 'SOFTWARE', /*Windows 10 Disc Image, AutoCAD, Ansys ...*/
                 'SPORTS_AND_OUTDOORS', /*Sports Equipment, Athletic Shoes, Bicycles ... */
                 'MUSIC', /*CDs, Recordings, Cassettes ... */
                 'MUSICAL_INSTRUMENT', /*Guitars, Keyboards ... */
                 'VIDEO_GAMES', /*Game Consoles, PS4 Dualshock 4 ... */
                 'CLOTHES', /*Used clothes, cosplay outfits ... */
                 'OFFICE_PRODUCTS', /*Gel-pens, Geometry Compass Set Combination Compass ...*/
                 'OTHERS') /*Others*/
            );

/* Create table COMMENT */
CREATE TABLE `COMMENT`
(
    `ID`        binary(16)   NOT NULL,
    `ITEM_ID`   binary(16)   NOT NULL,
    `CLIENT_ID` binary(16)   NOT NULL,
    `POST_DATE` date         NOT NULL,
    `CONTENT`   varchar(512) NOT NULL,
    PRIMARY KEY (`ID`)
);
/* Set the minimum length of the comment */
ALTER TABLE COMMENT
    ADD CONSTRAINT COMMENT_MIN_LENGTH
        CHECK ( LENGTH(CONTENT) >= 5 );

/* COMMENT POST_DATE Trigger */
/* A new inserted COMMENT item automatically has current date as its POST_DATE */
CREATE TRIGGER COMMENT_POST_DATE_INSERT
    BEFORE INSERT
    ON COMMENT
    FOR EACH ROW
BEGIN
    SET NEW.POST_DATE = CURDATE();
END;

/* create table CLIENT */
CREATE TABLE `CLIENT`
(
    `ID`                          binary(16)   NOT NULL,
    `UCID`                        int(11)      NOT NULL,
    `PASSWORD`                    varchar(256) NOT NULL,
    `PASSWORD_QUESTION`           varchar(256) NOT NULL,
    `ANSWER_OF_PASSWORD_QUESTION` varchar(256) NOT NULL,
    `ADDRESS`                     varchar(256) NOT NULL,
    `ACCOUNT_STATUS`              varchar(10)  NOT NULL DEFAULT 'OFFLINE',
    `PHONE_NUMBER`                varchar(20)           DEFAULT NULL,
    `DATE_OF_REGISTRATION`        date         NOT NULL,
    `USERNAME`                    varchar(20)  NOT NULL,
    UNIQUE KEY `CLIENT_USERNAME_uindex` (`USERNAME`),
    PRIMARY KEY (`ID`)
);

/* Password minimum length */
ALTER TABLE CLIENT
    ADD CONSTRAINT PASSWORD_MIN_LENGTH
        CHECK ( LENGTH(PASSWORD) >= 6 );
/* Username minimum length */
ALTER TABLE CLIENT
    ADD CONSTRAINT USERNAME_MINIMUM_LENGTH
        CHECK ( LENGTH(USERNAME) >= 6 );
/* Validate the account status */
ALTER TABLE CLIENT
    ADD CONSTRAINT VALIDATE_ACCOUNT_STATUS
        CHECK ( ACCOUNT_STATUS IN ('ACTIVE', 'OFFLINE') );
/* Validate the phone number */
CREATE TRIGGER PHONE_NUMBER_FORMAT_CHECK_BEFORE_INSERT
    BEFORE INSERT
    ON CLIENT
    FOR EACH ROW
BEGIN
    IF (NEW.PHONE_NUMBER REGEXP '^1\-[0-9]{3}\-[0-9]{3}\-[0-9]{3}$') = 0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID PHONE FORMAT!';
    END IF;
END;
CREATE TRIGGER PHONE_NUMBER_FORMAT_CHECK_BEFORE_UPDATE
    BEFORE UPDATE
    ON CLIENT
    FOR EACH ROW
BEGIN
    IF (NEW.PHONE_NUMBER REGEXP '^1\-[0-9]{3}\-[0-9]{3}\-[0-9]{3}$') = 0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID PHONE FORMAT!';
    END IF;
END;
/* CLIENT DATE_OF_REGISTRATION Trigger */
/* A new inserted CLIENT item automatically has current date as its DATE_OF_REGISTRATION */
CREATE TRIGGER CLIENT_DATE_OF_REGISTRATION_INSERT
    BEFORE INSERT
    ON CLIENT
    FOR EACH ROW
BEGIN
    SET NEW.DATE_OF_REGISTRATION = CURDATE();
END;

/* create table SELLER */
CREATE TABLE `SELLER`
(
    `CLIENT_ID` binary(16) NOT NULL,
    PRIMARY KEY (`CLIENT_ID`)
);

/* create table BUYER */
CREATE TABLE `BUYER`
(
    `CLIENT_ID` binary(16) NOT NULL,
    PRIMARY KEY (`CLIENT_ID`)
);

/* create table UCALGARY_MEMBER */
CREATE TABLE `UCALGARY_MEMBER`
(
    `UCID`                 int(11)        NOT NULL AUTO_INCREMENT,
    `CAMPUS_EMAIL_ADDRESS` varchar(256)   NOT NULL,
    `DATE_OF_BIRTH`        date           NOT NULL,
    `GENDER`               char(1)        NOT NULL,
    `BALANCE`              decimal(10, 2) NOT NULL DEFAULT '0.00',
    `FIRST_NAME`           varchar(30)    NOT NULL,
    `MIDDLE_INITIAL`       char(1)                 DEFAULT NULL,
    `LAST_NAME`            varchar(30)    NOT NULL,
    PRIMARY KEY (`UCID`)
);
/* Campus email address validator **/
CREATE TRIGGER CAMPUS_EMAIL_ADDRESS_FORMAT_CHECK_BEFORE_INSERT
    BEFORE INSERT
    ON UCALGARY_MEMBER
    FOR EACH ROW
BEGIN
    IF (NEW.CAMPUS_EMAIL_ADDRESS REGEXP
        '^[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9._-]@[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]\\.[a-zA-Z]{2,63}$') =
       0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID EMAIL FORMAT!';
    END IF;
END;

CREATE TRIGGER CAMPUS_EMAIL_ADDRESS_FORMAT_CHECK_BEFORE_UPDATE
    BEFORE UPDATE
    ON UCALGARY_MEMBER
    FOR EACH ROW
BEGIN
    IF (NEW.CAMPUS_EMAIL_ADDRESS REGEXP
        '^[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9._-]@[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]\\.[a-zA-Z]{2,63}$') =
       0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID EMAIL FORMAT!';
    END IF;
END;
/* GENDER Validator */
ALTER TABLE UCALGARY_MEMBER
    ADD CONSTRAINT GENDER_CHECK
        CHECK ( GENDER = 'M' OR GENDER = 'F' );
/* BALANCE Validator */
ALTER TABLE UCALGARY_MEMBER
    ADD CONSTRAINT BALANCE_CHECK
        CHECK ( BALANCE >= 0.00 );

/* create table ANNOUNCEMENT */
CREATE TABLE `ANNOUNCEMENT`
(
    `ID`        binary(16)   NOT NULL,
    `CONTENT`   varchar(512) NOT NULL,
    `POST_DATE` date         NOT NULL,
    `TITLE`     varchar(30)  NOT NULL,
    PRIMARY KEY (`ID`)
);
/* ANNOUNCEMENT CONTENT MINIMUM LENGTH */
ALTER TABLE ANNOUNCEMENT
    ADD CONSTRAINT CONTENT_MINIMUM_LENGTH
        CHECK ( LENGTH(CONTENT) >= 6 );

/* ANNOUNCEMENT POST_DATE Trigger */
/* A new inserted ANNOUNCEMENT item automatically has current date as its POST_DATE */
CREATE TRIGGER ANNOUNCEMENT_POST_DATE_INSERT
    BEFORE INSERT
    ON ANNOUNCEMENT
    FOR EACH ROW
BEGIN
    SET NEW.POST_DATE = CURDATE();
END;

/* create table ADMINISTRATOR */
CREATE TABLE `ADMINISTRATOR`
(
    `ID`                          binary(16)  NOT NULL,
    `PASSWORD`                    varchar(50) NOT NULL,
    `PASSWORD_QUESTION`           varchar(50) NOT NULL,
    `ANSWER_OF_PASSWORD_QUESTION` varchar(50) NOT NULL,
    `ADDRESS`                     varchar(50)          DEFAULT NULL,
    `PHONE_NUMBER`                varchar(20)          DEFAULT NULL,
    `DATE_OF_REGISTRATION`        date        NOT NULL DEFAULT '2019-01-01',
    `DATE_OF_BIRTH`               date        NOT NULL DEFAULT '1900-01-01',
    `USERNAME`                    varchar(20) NOT NULL,
    `FIRST_NAME`                  varchar(30) NOT NULL,
    `MIDDLE_INITIAL`              char(1)              DEFAULT NULL,
    `LAST_NAME`                   varchar(30) NOT NULL,
    PRIMARY KEY (`ID`),
    UNIQUE KEY `ADMINISTRATOR_USERNAME_uindex` (`USERNAME`)
);
/* Password minimum length */
ALTER TABLE ADMINISTRATOR
    ADD CONSTRAINT ADMINISTRATOR_PASSWORD_MIN_LENGTH
        CHECK ( LENGTH(PASSWORD) >= 6 );
/* Phone number validator */
CREATE TRIGGER ADMINISTRATOR_PHONE_NUMBER_FORMAT_CHECK_BEFORE_INSERT
    BEFORE INSERT
    ON ADMINISTRATOR
    FOR EACH ROW
BEGIN
    IF (NEW.PHONE_NUMBER REGEXP '^1\-[0-9]{3}\-[0-9]{3}\-[0-9]{3}$') = 0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID PHONE FORMAT!';
    END IF;
END;
CREATE TRIGGER ADMINISTRATOR_PHONE_NUMBER_FORMAT_CHECK_BEFORE_UPDATE
    BEFORE UPDATE
    ON ADMINISTRATOR
    FOR EACH ROW
BEGIN
    IF (NEW.PHONE_NUMBER REGEXP '^1\-[0-9]{3}\-[0-9]{3}\-[0-9]{3}$') = 0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID PHONE FORMAT!';
    END IF;
END;
/* ADMINISTRATOR's USERNAME minimum length */
ALTER TABLE ADMINISTRATOR
    ADD CONSTRAINT ADMINISTRATOR_USERNAME_MINIMUM_LENGTH
        CHECK ( LENGTH(USERNAME) >= 6 );

/* create table ORDER */
CREATE TABLE `ORDER`
(
    `ID`                         binary(16)    NOT NULL,
    `ITEM_ID`                    binary(16)    NOT NULL,
    `TOTAL_PRICE`                decimal(8, 2) NOT NULL DEFAULT '0.00',
    `ADDRESS_OF_RECEIVER`        varchar(50)   NOT NULL,
    `STATUS`                     varchar(20)   NOT NULL DEFAULT 'ORDER FILLED',
    `SHIPPING_METHOD`            varchar(20)   NOT NULL DEFAULT 'CONTACT BY BUYER',
    `FIRST_NAME_OF_RECEIVER`     varchar(30)   NOT NULL,
    `MIDDLE_INITIAL_OF_RECEIVER` char(1)                DEFAULT NULL,
    `LAST_NAME_OF_RECEIVER`      varchar(30)   NOT NULL,
    `PHONE_NUMBER_OF_RECEIVER`   varchar(20)   NOT NULL,
    `DATE_OF_ORDER`              date          NOT NULL,
    `CLIENT_ID_OF_SELLER`        binary(16)    NOT NULL,
    `CLIENT_ID_OF_BUYER`         binary(16)    NOT NULL,
    PRIMARY KEY (`ID`)
);
/* Order total price validator */
ALTER TABLE `ORDER`
    ADD CONSTRAINT TOTAL_PRICE_VALIDATOR
        CHECK ( TOTAL_PRICE >= 0.00 );
/* Order status validator */
ALTER TABLE `ORDER`
    ADD CONSTRAINT ORDER_STATUS_VALIDATOR
        CHECK ( STATUS IN ('ORDER FILLED', 'ORDER RECEIVED', 'DELIVERING', 'ORDER FINISHED') );
/* Order shipping method validator */
ALTER TABLE `ORDER`
    ADD CONSTRAINT SHIPPING_METHOD_VALIDATOR
        CHECK ( SHIPPING_METHOD IN ('CONTACT BY BUYER', 'ONLINE DELIVERY'));
/* Phone number of receiver validator */
CREATE TRIGGER RECEIVER_PHONE_NUMBER_FORMAT_CHECK_BEFORE_INSERT
    BEFORE INSERT
    ON `ORDER`
    FOR EACH ROW
BEGIN
    IF (NEW.PHONE_NUMBER_OF_RECEIVER REGEXP '^1\-[0-9]{3}\-[0-9]{3}\-[0-9]{3}$') = 0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID PHONE FORMAT!';
    END IF;
END;
CREATE TRIGGER RECEIVER_PHONE_NUMBER_FORMAT_CHECK_BEFORE_UPDATE
    BEFORE UPDATE
    ON `ORDER`
    FOR EACH ROW
BEGIN
    IF (NEW.PHONE_NUMBER_OF_RECEIVER REGEXP '^1\-[0-9]{3}\-[0-9]{3}\-[0-9]{3}$') = 0 THEN /* 1-123-123-123 */
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID PHONE FORMAT!';
    END IF;
END;

/* ORDER DATE_OF_ORDER Trigger */
/* A new inserted ORDER item automatically has current date as its DATE_OF_ORDER */
CREATE TRIGGER ORDER_DATE_OF_ORDER_INSERT
    BEFORE INSERT
    ON `ORDER`
    FOR EACH ROW
BEGIN
    SET NEW.DATE_OF_ORDER = CURDATE();
END;

/* create table IDEA_LIST */
CREATE TABLE `IDEA_LIST`
(
    `CLIENT_ID`   binary(16)        NOT NULL,
    `LIST_NUMBER` int(11) DEFAULT 1 NOT NULL, /* We need a trigger to make sure if one item is removed, then the list number will be re-sorted **/
    `NAME`        varchar(20)       NOT NULL,
    `KEYWORD`     json              NOT NULL,
    `DESCRIPTION` varchar(256)      NOT NULL,
    PRIMARY KEY (`CLIENT_ID`, `LIST_NUMBER`),
    UNIQUE KEY `IDEA_LIST_LIST_NUMBER_uindex` (`LIST_NUMBER`)
);

/* Initialize new IDEA_LIST obj with an empty KEYWORD */
CREATE TRIGGER IDEA_LIST_KEYWORD_INITIALIZE
    BEFORE INSERT
    ON IDEA_LIST
    FOR EACH ROW
BEGIN
    SET NEW.KEYWORD = JSON_ARRAY();
END;

/* create table MANAGED_BY_ADMINISTRATOR */
CREATE TABLE `MANAGED_BY_ADMINISTRATOR`
(
    `ORDER_ID`         binary(16) NOT NULL,
    `ADMINISTRATOR_ID` binary(16) NOT NULL,
    `ANNOUNCEMENT_ID`  binary(16) NOT NULL,
    `CLIENT_ID`        binary(16) NOT NULL,
    `UCID`             int(11)    NOT NULL,
    `COMMENT_ID`       binary(16) NOT NULL,
    PRIMARY KEY (`ORDER_ID`, `ADMINISTRATOR_ID`, `ANNOUNCEMENT_ID`, `CLIENT_ID`, `UCID`, `COMMENT_ID`)
);

/* add foreign keys for ITEM */
ALTER TABLE ITEM
    ADD CONSTRAINT ADMINISTRATOR_ID_FK
        FOREIGN KEY (ADMINISTRATOR_ID) REFERENCES ADMINISTRATOR (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ITEM
    ADD CONSTRAINT CLIENT_ID_OF_BUYER_FK
        FOREIGN KEY (CLIENT_ID_OF_BUYER) REFERENCES BUYER (CLIENT_ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ITEM
    ADD CONSTRAINT CLIENT_ID_OF_SELLER_FK
        FOREIGN KEY (CLIENT_ID_OF_SELLER) REFERENCES SELLER (CLIENT_ID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for COMMENT */
ALTER TABLE COMMENT
    ADD CONSTRAINT CLIENT_ID_FK
        FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE COMMENT
    ADD CONSTRAINT ITEM_ID_FK
        FOREIGN KEY (ITEM_ID) REFERENCES ITEM (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for SELLER */
ALTER TABLE SELLER
    ADD CONSTRAINT SELLER_FK
        FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for BUYER */
ALTER TABLE BUYER
    ADD CONSTRAINT BUYER_FK
        FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for ORDER */
ALTER TABLE `ORDER`
    ADD CONSTRAINT ORDER_CLIENT_ID_OF_BUYER_FK
        FOREIGN KEY (CLIENT_ID_OF_BUYER) REFERENCES BUYER (CLIENT_ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE `ORDER`
    ADD CONSTRAINT ORDER_CLIENT_ID_OF_SELLER_FK
        FOREIGN KEY (CLIENT_ID_OF_SELLER) REFERENCES SELLER (CLIENT_ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE `ORDER`
    ADD CONSTRAINT ORDER_ITEM_ID_FK
        FOREIGN KEY (ITEM_ID) REFERENCES ITEM (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for IDEA_LIST */
ALTER TABLE IDEA_LIST
    ADD CONSTRAINT IDEA_LIST_FK
        FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for MANAGED_BY_ADMINISTRATOR */
ALTER TABLE MANAGED_BY_ADMINISTRATOR
    ADD CONSTRAINT MANAGED_BY_ADMINISTRATOR_ADMINISTRATOR_ID_FK
        FOREIGN KEY (ADMINISTRATOR_ID) REFERENCES ADMINISTRATOR (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE MANAGED_BY_ADMINISTRATOR
    ADD CONSTRAINT MANAGED_BY_ADMINISTRATOR_ANNOUNCEMENT_ID_FK
        FOREIGN KEY (ANNOUNCEMENT_ID) REFERENCES ANNOUNCEMENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE MANAGED_BY_ADMINISTRATOR
    ADD CONSTRAINT MANAGED_BY_ADMINISTRATOR_CLIENT_ID_FK
        FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE MANAGED_BY_ADMINISTRATOR
    ADD CONSTRAINT MANAGED_BY_ADMINISTRATOR_COMMENT_ID_FK
        FOREIGN KEY (COMMENT_ID) REFERENCES COMMENT (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE MANAGED_BY_ADMINISTRATOR
    ADD CONSTRAINT MANAGED_BY_ADMINISTRATOR_ORDER_ID_FK
        FOREIGN KEY (ORDER_ID) REFERENCES `ORDER` (ID)
            ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE MANAGED_BY_ADMINISTRATOR
    ADD CONSTRAINT MANAGED_BY_ADMINISTRATOR_UCID_FK
        FOREIGN KEY (UCID) REFERENCES UCALGARY_MEMBER (UCID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* add foreign keys for CLIENT */
ALTER TABLE CLIENT
    ADD CONSTRAINT CLIENT_ID_UCID_FK
        FOREIGN KEY (UCID) REFERENCES UCALGARY_MEMBER (UCID)
            ON UPDATE CASCADE ON DELETE CASCADE;

/* Make sure middle initial in ADMINISTRATOR is NULL or an uppercase English letter */
CREATE TRIGGER ADMINISTRATOR_MIDDLE_INIT_INSERT
    BEFORE INSERT
    ON ADMINISTRATOR
    FOR EACH ROW
BEGIN
    IF (NEW.MIDDLE_INITIAL IS NOT NULL) AND (NEW.MIDDLE_INITIAL REGEXP BINARY '^[A-Z]$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID MIDDLE INITIAL!';
    END IF;
END;
CREATE TRIGGER ADMINISTRATOR_MIDDLE_INIT_UPDATE
    BEFORE UPDATE
    ON ADMINISTRATOR
    FOR EACH ROW
BEGIN
    IF (NEW.MIDDLE_INITIAL IS NOT NULL) AND (NEW.MIDDLE_INITIAL REGEXP BINARY '^[A-Z]$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID MIDDLE INITIAL!';
    END IF;
END;
/* Make sure middle initial in ORDER is NULL or an uppercase English letter */
CREATE TRIGGER ORDER_MIDDLE_INIT_INSERT
    BEFORE INSERT
    ON `ORDER`
    FOR EACH ROW
BEGIN
    IF (NEW.MIDDLE_INITIAL_OF_RECEIVER IS NOT NULL) AND
       (NEW.MIDDLE_INITIAL_OF_RECEIVER REGEXP BINARY '^[A-Z]$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID MIDDLE INITIAL!';
    END IF;
END;
CREATE TRIGGER ORDER_MIDDLE_INIT_UPDATE
    BEFORE UPDATE
    ON `ORDER`
    FOR EACH ROW
BEGIN
    IF (NEW.MIDDLE_INITIAL_OF_RECEIVER IS NOT NULL) AND
       (NEW.MIDDLE_INITIAL_OF_RECEIVER REGEXP BINARY '^[A-Z]$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID MIDDLE INITIAL!';
    END IF;
END;
/* Make sure middle initial in UCALGARY_MEMBER is NULL or an uppercase English letter */
CREATE TRIGGER UCALGARY_MEMBER_MIDDLE_INIT_INSERT
    BEFORE INSERT
    ON UCALGARY_MEMBER
    FOR EACH ROW
BEGIN
    IF (NEW.MIDDLE_INITIAL IS NOT NULL) AND (NEW.MIDDLE_INITIAL REGEXP BINARY '^[A-Z]$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID MIDDLE INITIAL!';
    END IF;
END;
CREATE TRIGGER UCALGARY_MEMBER_MIDDLE_INIT_UPDATE
    BEFORE UPDATE
    ON UCALGARY_MEMBER
    FOR EACH ROW
BEGIN
    IF (NEW.MIDDLE_INITIAL IS NOT NULL) AND (NEW.MIDDLE_INITIAL REGEXP BINARY '^[A-Z]$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID MIDDLE INITIAL!';
    END IF;
END;

/* Make sure first name and last name of ADMINISTRATOR is in uppercase */
CREATE TRIGGER ADMINISTRATOR_UPPERCASE_NAME_INSERT
    BEFORE INSERT
    ON ADMINISTRATOR
    FOR EACH ROW
BEGIN
    IF (NEW.FIRST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID FIRST NAME!';
    ELSEIF (NEW.LAST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID LAST NAME!';
    END IF;
END;
CREATE TRIGGER ADMINISTRATOR_UPPERCASE_NAME_UPDATE
    BEFORE UPDATE
    ON ADMINISTRATOR
    FOR EACH ROW
BEGIN
    IF (NEW.FIRST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID FIRST NAME!';
    ELSEIF (NEW.LAST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID LAST NAME!';
    END IF;
END;
/* Make sure first name and last name of ORDER is in uppercase */
CREATE TRIGGER ORDER_UPPERCASE_NAME_INSERT
    BEFORE INSERT
    ON `ORDER`
    FOR EACH ROW
BEGIN
    IF (NEW.FIRST_NAME_OF_RECEIVER REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID FIRST NAME!';
    ELSEIF (NEW.LAST_NAME_OF_RECEIVER REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID LAST NAME!';
    END IF;
END;
CREATE TRIGGER ORDER_UPPERCASE_NAME_UPDATE
    BEFORE UPDATE
    ON `ORDER`
    FOR EACH ROW
BEGIN
    IF (NEW.FIRST_NAME_OF_RECEIVER REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID FIRST NAME!';
    ELSEIF (NEW.LAST_NAME_OF_RECEIVER REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID LAST NAME!';
    END IF;
END;
/* Make sure first name and last name of UCALGARY_MEMBER is in uppercase */
CREATE TRIGGER UCALGARY_MEMBER_UPPERCASE_NAME_INSERT
    BEFORE INSERT
    ON UCALGARY_MEMBER
    FOR EACH ROW
BEGIN
    IF (NEW.FIRST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID FIRST NAME!';
    ELSEIF (NEW.LAST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID LAST NAME!';
    END IF;
END;
CREATE TRIGGER UCALGARY_MEMBER_UPPERCASE_NAME_UPDATE
    BEFORE UPDATE
    ON UCALGARY_MEMBER
    FOR EACH ROW
BEGIN
    IF (NEW.FIRST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID FIRST NAME!';
    ELSEIF (NEW.LAST_NAME REGEXP BINARY '^[A-Z]+$') = 0 THEN
        SIGNAL SQLSTATE '12345'
            SET MESSAGE_TEXT = 'INVALID LAST NAME!';
    END IF;
END;

/* Validate UCALGARY_MEMBER DATE_OF_BIRTH */
ALTER TABLE UCALGARY_MEMBER
    ADD CONSTRAINT UCALGARY_MEMBER_BDATE_VALIDATOR
        CHECK ( DATE_OF_BIRTH >= '1900-01-01');

/* Validate ADMINISTRATOR DATE_OF_BIRTH */
ALTER TABLE ADMINISTRATOR
    ADD CONSTRAINT ADMINISTRATOR_BDATE_VALIDATOR
        CHECK ( DATE_OF_BIRTH >= '1900-01-01');


/* insert 5 users into UCALGARY_MEMBER*/
/* We simulate a UCalgary email address with suffix 'uc.ca' */
INSERT INTO UCALGARY_MEMBER
(CAMPUS_EMAIL_ADDRESS, DATE_OF_BIRTH, GENDER, BALANCE, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES ('shari_houston@uc.ca', '1989-02-02', 'M', '1000.15', 'SHARI', 'K', 'HOUSTON');

INSERT INTO UCALGARY_MEMBER
(CAMPUS_EMAIL_ADDRESS, DATE_OF_BIRTH, GENDER, BALANCE, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES ('joseph_murphy@uc.ca', '1989-12-02', 'M', '2000.00', 'JOSEPH', NULL, 'MURPHY');

INSERT INTO UCALGARY_MEMBER
(CAMPUS_EMAIL_ADDRESS, DATE_OF_BIRTH, GENDER, BALANCE, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES ('tiffany_hamilton@uc.ca', '1900-12-02', 'F', '1234.56', 'TIFFANY', 'A', 'HAMILTON');

INSERT INTO UCALGARY_MEMBER
(CAMPUS_EMAIL_ADDRESS, DATE_OF_BIRTH, GENDER, BALANCE, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES ('tracy_berry@uc.ca', '1997-01-02', 'F', '500.12', 'TRACY', 'S', 'BERRY');

INSERT INTO UCALGARY_MEMBER
(CAMPUS_EMAIL_ADDRESS, DATE_OF_BIRTH, GENDER, BALANCE, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES ('tracy_berry2@uc.ca', '1997-01-02', 'F', '500.12', 'TRACY', 'S', 'BERRY');

INSERT INTO UCALGARY_MEMBER
(CAMPUS_EMAIL_ADDRESS, DATE_OF_BIRTH, GENDER, BALANCE, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES ('chad_caldwell@uc.ca', '1993-05-31', 'M', '0.00', 'CHAD', NULL, 'CALDWELL');

/* Delete a row */
DELETE
FROM UCALGARY_MEMBER
WHERE CAMPUS_EMAIL_ADDRESS = 'tracy_berry2@uc.ca';

/* Update a row with minimum UCID */
UPDATE UCALGARY_MEMBER
SET BALANCE = BALANCE + 100.00
ORDER BY UCID DESC
LIMIT 1;

/* insert 4 CLIENTs base on UCALGARY_MEMBER*/
SET @minimum_UCID = (SELECT MIN(UCID)
                     FROM UCALGARY_MEMBER);
INSERT INTO CLIENT
(ID, UCID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, USERNAME)
VALUES (UUID_TO_BIN(UUID()), @minimum_UCID, 'abcdef', '?', '!', 'USCGC Alvarado,FPO AA 97968', '1-123-456-789',
        'shari_houston');

INSERT INTO CLIENT
(ID, UCID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, USERNAME)
VALUES (UUID_TO_BIN(UUID()), @minimum_UCID + 1, 'AMINDAQ', '?', '!', '676 Becker Mission Suite 229,Grayshire, OK 80377',
        '1-113-456-789', 'joseph_murphyX');

INSERT INTO CLIENT
(ID, UCID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, USERNAME)
VALUES (UUID_TO_BIN(UUID()), @minimum_UCID + 2, 'AMINDAQ', '?', '!', 'zxjkchkzxhci9123', '1-113-456-789',
        'joseph_murpShyX');

INSERT INTO CLIENT
(ID, UCID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, USERNAME)
VALUES (UUID_TO_BIN(UUID()), @minimum_UCID + 3, 'IOASDJIO2193#', '?SHCIU', '!ASDAS*', 'zxjkchkasd81', '1-000-456-789',
        'BAZBXIxUhcI921');

INSERT INTO CLIENT
(ID, UCID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, USERNAME)
VALUES (UUID_TO_BIN(UUID()), (SELECT UCALGARY_MEMBER.UCID
                              FROM UCALGARY_MEMBER
                              WHERE UCALGARY_MEMBER.UCID = '6'
                                AND UCALGARY_MEMBER.CAMPUS_EMAIL_ADDRESS = 'chad_caldwell@uc.ca'), 'IOASDJIO2193#',
        '?SHCIU', '!ASDAS*', 'zxjkchkasd81', '1-000-456-789', 'BAZBXIUhcI921');


/* update */
UPDATE UCALGARY_MEMBER
SET BALANCE = BALANCE - 10.5
WHERE UCID = (SELECT UCID FROM CLIENT WHERE USERNAME = 'shari_houston');

UPDATE CLIENT
SET PASSWORD = '123456'
WHERE USERNAME = 'joseph_murpShyX';

/* delete */
DELETE
FROM CLIENT
WHERE USERNAME = 'BAZBXIUhcI921';

/* insert 2 ADMINISTRATORs */
INSERT INTO ADMINISTRATOR
(ID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, DATE_OF_REGISTRATION,
 DATE_OF_BIRTH, USERNAME, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES (UUID_TO_BIN(UUID()), 'abcdef', '?', '.', '094 Mackenzie Estate,Tylerview, NV 22408', '1-123-123-123', CURDATE(),
        '1993-01-01', 'jeanette kelley', 'JEANETTE', NULL, 'KELLEY');

INSERT INTO ADMINISTRATOR
(ID, PASSWORD, PASSWORD_QUESTION, ANSWER_OF_PASSWORD_QUESTION, ADDRESS, PHONE_NUMBER, DATE_OF_REGISTRATION,
 DATE_OF_BIRTH, USERNAME, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME)
VALUES (UUID_TO_BIN(UUID()), 'abcdef', '?', '.', 'USNS Ross,FPO AE 72925', '1-123-123-131', CURDATE(), '1993-02-01',
        'david barker', 'DAVID', 'S', 'BARKER');

/* update */
UPDATE ADMINISTRATOR
SET PASSWORD = '123456'
WHERE USERNAME = 'david barker';

/* delete */
DELETE
FROM ADMINISTRATOR
WHERE USERNAME = 'david barker';

/* insert 1 ITEM */
/* The ADMINISTRATOR_ID in ITEM will be shown only when an ADMINISTRATOR tries to unpublish the ITEM, thus its default value is NULL */
INSERT INTO SELLER VALUE ((SELECT ID FROM CLIENT WHERE USERNAME = 'shari_houston'));

INSERT INTO ITEM
    (ID, NAME, DESCRIPTION, PRICE, TYPE, CLIENT_ID_OF_SELLER)
VALUES (UUID_TO_BIN(UUID()), 'Playstation 4', 'PS4 PRO 1G', 300.00, 'VIDEO_GAMES',
        (SELECT CLIENT_ID FROM SELLER WHERE CLIENT_ID = (SELECT ID FROM CLIENT WHERE USERNAME = 'shari_houston')));

/* adjust the ITEM */
INSERT INTO BUYER VALUE ((SELECT ID FROM CLIENT WHERE USERNAME = 'joseph_murpShyX'));

UPDATE ITEM
SET CLIENT_ID_OF_BUYER = (SELECT CLIENT_ID
                          FROM BUYER
                          WHERE CLIENT_ID =
                                (SELECT ID FROM CLIENT WHERE USERNAME = 'joseph_murpShyX'))
WHERE NAME LIKE '%Playstation 4%';

/* delete */
DELETE
FROM ITEM
WHERE CLIENT_ID_OF_SELLER =
      (SELECT CLIENT_ID
       FROM SELLER
       WHERE CLIENT_ID =
             (SELECT ID FROM CLIENT WHERE USERNAME = 'shari_houston'));

/* delete CLIENT_ID in BUYER if no BUYERs are assigned in ITEM */
DELETE
FROM BUYER
WHERE CLIENT_ID NOT IN (SELECT CLIENT_ID_OF_BUYER FROM ITEM);

/* delete CLIENT_ID in SELLER if no SELLERs are assigned in ITEM */
DELETE
FROM SELLER
WHERE CLIENT_ID NOT IN (SELECT CLIENT_ID_OF_SELLER FROM ITEM);

/* A CLIENT posts a comment in an ITEM */
INSERT INTO SELLER VALUE ((SELECT ID FROM CLIENT WHERE USERNAME = 'shari_houston'));
INSERT INTO ITEM
    (ID, NAME, DESCRIPTION, PRICE, TYPE, CLIENT_ID_OF_SELLER)
VALUES (UUID_TO_BIN(UUID()), 'Playstation 4 SLIM', 'PS4 SLIM 1G', 200.00, 'VIDEO_GAMES',
        (SELECT CLIENT_ID FROM SELLER WHERE CLIENT_ID = (SELECT ID FROM CLIENT WHERE USERNAME = 'shari_houston')));

SELECT BIN_TO_UUID(ID, TRUE)
FROM ITEM;
SELECT *
FROM ITEM
WHERE ID = UUID_TO_BIN('ff5311e9-abec-c89c-9c23-6969d2e1f31e', TRUE);

SELECT BIN_TO_UUID(ID), NAME, DAYS_TO_EXPIRE, (SELECT USERNAME FROM CLIENT WHERE CLIENT.ID = ITEM.CLIENT_ID_OF_BUYER)
FROM ITEM
WHERE ITEM.CLIENT_ID_OF_SELLER = 'a';

/* Add idea list for a client */
INSERT INTO IDEA_LIST
    (CLIENT_ID, LIST_NUMBER, NAME, DESCRIPTION)
VALUES ((SELECT ID FROM CLIENT WHERE USERNAME = 'joseph_murphyX'), 3, 'Cyberpunk2088', 'It has a good trailer anyway!');

/* Add 2 keywords for the list 1 */
UPDATE IDEA_LIST
SET KEYWORD = JSON_ARRAY_APPEND(KEYWORD, '$', 'Console Games')
WHERE CLIENT_ID = (SELECT ID FROM CLIENT WHERE USERNAME = 'joseph_murphyX')
  AND NAME = 'Cyberpunk2088';

UPDATE IDEA_LIST
SET KEYWORD = JSON_ARRAY_APPEND(KEYWORD, '$', 'High Resolution')
WHERE CLIENT_ID = (SELECT ID FROM CLIENT WHERE USERNAME = 'joseph_murphyX')
  AND NAME = 'Cyberpunk2088';

SELECT KEYWORD
FROM IDEA_LIST
WHERE CLIENT_ID = (SELECT ID FROM CLIENT WHERE USERNAME = 'joseph_murphyX')
  AND NAME = 'Cyberpunk2088';

INSERT INTO ANNOUNCEMENT
    (ID, CONTENT, TITLE)
VALUES (UUID_TO_BIN(UUID()), 'Content', 'Title');

SELECT *
FROM ANNOUNCEMENT;

